/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

import {
  DEFAULT_SETTINGS,
  EasyTypingSettingTab,
  LineFormater,
  getPosLineType,
  getPosLineType2
} from "./chunk-chunk-7EAM3INM.js";
import {
  getTypeStrOfTransac,
  isRegexp,
  offsetToPos,
  parseTheAfterPattern,
  print,
  ruleStringList2RuleList,
  setDebug,
  string2pairstring,
  taboutCursorInPairedString
} from "./chunk-chunk-NNM4VJTV.js";

// src/main.ts
import { MarkdownView, Notice, Platform, Plugin } from "obsidian";
import { EditorState, Prec } from "@codemirror/state";
import { EditorView as EditorView3, keymap } from "@codemirror/view";
import { syntaxTree as syntaxTree2 } from "@codemirror/language";

// src/syntax.ts
import { syntaxTree } from "@codemirror/language";
function isCodeBlockInPos(state, pos) {
  let codeBlockInfos = getCodeBlocksInfos(state);
  for (let i = 0; i < codeBlockInfos.length; i++) {
    if (pos >= codeBlockInfos[i].start_pos && pos <= codeBlockInfos[i].end_pos) {
      return true;
    }
  }
  return false;
}
function getCodeBlockInfoInPos(state, pos) {
  let codeBlockInfos = getCodeBlocksInfos(state);
  for (let i = 0; i < codeBlockInfos.length; i++) {
    if (pos >= codeBlockInfos[i].start_pos && pos <= codeBlockInfos[i].end_pos) {
      return codeBlockInfos[i];
    }
  }
  return null;
}
function selectCodeBlockInPos(view, selection) {
  let pos = selection.anchor;
  let codeBlockInfos = getCodeBlocksInfos(view.state);
  for (let i = 0; i < codeBlockInfos.length; i++) {
    if (pos >= codeBlockInfos[i].start_pos && pos <= codeBlockInfos[i].end_pos) {
      if (codeBlockInfos[i].code_start_pos == codeBlockInfos[i].code_end_pos) {
        view.dispatch({
          selection: {
            anchor: codeBlockInfos[i].start_pos,
            head: codeBlockInfos[i].end_pos
          }
        });
        return true;
      }
      let code_line_start = view.state.doc.lineAt(codeBlockInfos[i].code_start_pos);
      let isCodeSelected = selection.anchor == code_line_start.from && selection.head == codeBlockInfos[i].code_end_pos;
      let isCodeBlockSelected = selection.anchor == codeBlockInfos[i].start_pos && selection.head == codeBlockInfos[i].end_pos;
      if (isCodeSelected) {
        view.dispatch({
          selection: {
            anchor: codeBlockInfos[i].start_pos,
            head: codeBlockInfos[i].end_pos
          }
        });
        return true;
      }
      if (isCodeBlockSelected)
        return false;
      view.dispatch({
        selection: {
          anchor: code_line_start.from,
          head: codeBlockInfos[i].code_end_pos
        }
      });
      return true;
    }
  }
  return false;
}
function getCodeBlocksInfos(state) {
  let isCodeBlockBegin = false;
  let codeBlockInfos = [];
  let curCodeBlockInfo = null;
  const doc = state.doc;
  syntaxTree(state).iterate({
    enter(node) {
      const nodeName = node.name;
      const nodeFrom = node.from;
      const nodeTo = node.to;
      const nodeText = state.sliceDoc(nodeFrom, nodeTo);
      if (nodeName.includes("codeblock-begin")) {
        isCodeBlockBegin = true;
        let start_pos = nodeFrom + nodeText.indexOf("`");
        let indent = start_pos - state.doc.lineAt(start_pos).from;
        let language = nodeText.trim().substring(3);
        curCodeBlockInfo = {
          start_pos,
          end_pos: -1,
          code_start_pos: -1,
          code_end_pos: -1,
          language: language.toLowerCase(),
          indent
        };
      } else if (nodeName.includes("codeblock-end")) {
        isCodeBlockBegin = false;
        if (curCodeBlockInfo != null) {
          curCodeBlockInfo.end_pos = nodeTo;
          if (doc.lineAt(curCodeBlockInfo.start_pos).number == doc.lineAt(curCodeBlockInfo.end_pos).number - 1) {
            curCodeBlockInfo.code_start_pos = doc.lineAt(curCodeBlockInfo.start_pos).to;
            curCodeBlockInfo.code_end_pos = doc.lineAt(curCodeBlockInfo.start_pos).to;
          } else {
            let code_start_line = doc.lineAt(curCodeBlockInfo.start_pos).number + 1;
            let code_end_line = doc.lineAt(curCodeBlockInfo.end_pos).number - 1;
            curCodeBlockInfo.code_start_pos = doc.line(code_start_line).from + curCodeBlockInfo.indent;
            curCodeBlockInfo.code_end_pos = doc.line(code_end_line).to;
          }
          codeBlockInfos.push(curCodeBlockInfo);
          curCodeBlockInfo = null;
        }
      }
    }
  });
  if (isCodeBlockBegin && curCodeBlockInfo) {
    curCodeBlockInfo.end_pos = doc.length;
    curCodeBlockInfo.code_end_pos = doc.length;
    if (doc.lines > doc.lineAt(curCodeBlockInfo.start_pos).number) {
      let start_line = doc.lineAt(curCodeBlockInfo.start_pos).number + 1;
      let code_start_pos = doc.line(start_line).from + curCodeBlockInfo.indent;
      curCodeBlockInfo.code_start_pos = code_start_pos < doc.length ? code_start_pos : doc.lineAt(curCodeBlockInfo.start_pos + 1).from;
    } else {
      curCodeBlockInfo.code_start_pos = doc.lineAt(curCodeBlockInfo.start_pos).to;
    }
    codeBlockInfos.push(curCodeBlockInfo);
    curCodeBlockInfo = null;
  }
  return codeBlockInfos;
}
function getQuoteInfoInPos(state, pos) {
  let quote_regex = /^(\s*)(>+) ?/;
  let callout_regex = /^(\s*)(>)+ \[![^\s]+\][+-]? ?/;
  let cur_line = state.doc.lineAt(pos);
  let match = cur_line.text.match(quote_regex);
  let is_callout = false;
  let cur_start_pos = -1;
  let cur_end_pos = -1;
  if (match) {
    let match_callout = cur_line.text.match(callout_regex);
    cur_start_pos = cur_line.from + (match_callout ? match_callout[0].length : match[0].length);
    cur_end_pos = cur_line.to;
    let quote_start_line = cur_line.number;
    let quote_end_line = quote_start_line;
    for (let i = quote_start_line + 1; i <= state.doc.lines; i += 1) {
      let line = state.doc.line(i);
      if (line.text.match(quote_regex)) {
        quote_end_line = i;
      } else
        break;
    }
    for (let i = quote_start_line; i >= 1; i -= 1) {
      let line = state.doc.line(i);
      let match_callout2 = line.text.match(callout_regex);
      let match_quote = line.text.match(quote_regex);
      if (match_callout2) {
        is_callout = true;
        quote_start_line = i;
      } else if (match_quote) {
        quote_start_line = i;
      } else
        break;
    }
    return {
      start_pos: state.doc.line(quote_start_line).from,
      end_pos: state.doc.line(quote_end_line).to,
      is_callout,
      cur_start_pos,
      cur_end_pos
    };
  } else {
    return null;
  }
}

// src/tabstops_state_field.ts
import { EditorView, Decoration } from "@codemirror/view";
import { StateEffect, StateField } from "@codemirror/state";
var addTabstopsEffect = StateEffect.define();
var removeTabstopEffect = StateEffect.define();
var removeAllTabstopsEffect = StateEffect.define();
var tabstopsStateField = StateField.define({
  create() {
    return [];
  },
  update(value, transaction) {
    let tabstopGroups = value;
    tabstopGroups.forEach((grp) => grp.map(transaction.changes));
    for (const effect of transaction.effects) {
      if (effect.is(addTabstopsEffect)) {
        tabstopGroups = [];
        tabstopGroups.unshift(...effect.value);
      } else if (effect.is(removeTabstopEffect)) {
        tabstopGroups.shift();
      } else if (effect.is(removeAllTabstopsEffect)) {
        tabstopGroups = [];
      }
    }
    return tabstopGroups;
  },
  provide: (field) => {
    return EditorView.decorations.of((view) => {
      const tabstopGroups = view.state.field(field);
      const decos = [];
      if (tabstopGroups.length >= 2) {
        decos.push(...tabstopGroups[1].getDecoRanges());
      }
      return Decoration.set(decos, true);
    });
  }
});
function getTabstopGroupsFromView(view) {
  const currentTabstopGroups = view.state.field(tabstopsStateField);
  return currentTabstopGroups;
}
function hasTabstops(view) {
  return getTabstopGroupsFromView(view).length > 0;
}
function addTabstops(view, tabstopGroups) {
  view.dispatch({
    effects: [addTabstopsEffect.of(tabstopGroups)]
  });
}
function removeTabstop(view) {
  view.dispatch({
    effects: [removeTabstopEffect.of(null)]
  });
}
function removeAllTabstops(view) {
  view.dispatch({
    effects: [removeAllTabstopsEffect.of(null)]
  });
}
function addTabstopsAndSelect(view, tabstopGroups) {
  addTabstops(view, tabstopGroups);
  tabstopGroups[0].select(view, false);
}
function tidyTabstops(view) {
  const currentTabstopGroups = getTabstopGroupsFromView(view);
  if (currentTabstopGroups.length === 1) {
    removeAllTabstops(view);
  }
}
function isInsideCurTabstop(view) {
  const currentTabstopGroups = getTabstopGroupsFromView(view);
  if (currentTabstopGroups.length > 1 && currentTabstopGroups[0].containsSelection(view.state.selection)) {
    return true;
  }
  return false;
}
function consumeAndGotoNextTabstop(view) {
  if (getTabstopGroupsFromView(view).length === 0)
    return false;
  removeTabstop(view);
  const oldSel = view.state.selection;
  const nextGrp = getTabstopGroupsFromView(view)[0];
  if (!nextGrp)
    return false;
  const shouldMoveToEndpoints = nextGrp.containsSelection(oldSel);
  nextGrp.select(view, shouldMoveToEndpoints);
  const newSel = view.state.selection;
  if (oldSel.eq(newSel))
    return consumeAndGotoNextTabstop(view);
  tidyTabstops(view);
  return true;
}

// src/tabstop.ts
import { EditorSelection as EditorSelection2 } from "@codemirror/state";
import { Decoration as Decoration2, WidgetType } from "@codemirror/view";
var TABSTOP_DECO_CLASS = "easy-typing-tabstops";
var CURSOR_WIDGET_CLASS = "easy-typing-cursor-widget";
function getMarkerDecoration(from, to) {
  const className = `${TABSTOP_DECO_CLASS}`;
  if (from == to) {
    return Decoration2.widget({
      widget: new CursorWidget(),
      side: 0
    }).range(from);
  }
  return Decoration2.mark({
    inclusive: true,
    class: className
  }).range(from, to);
}
var TabstopGroup = class {
  constructor(tabstopSpecs) {
    const decos = tabstopSpecs.map((spec) => getMarkerDecoration(spec.from, spec.to));
    this.selections = tabstopSpecs.map((spec) => EditorSelection2.range(spec.from, spec.to));
    this.decos = Decoration2.set(decos, true);
  }
  select(view, selectEndpoints) {
    const sel = this.toEditorSelection();
    const toSelect = selectEndpoints ? getEditorSelectionEndpoints(sel) : sel;
    view.dispatch({
      selection: toSelect
    });
  }
  toSelectionRanges() {
    return this.selections;
  }
  toEditorSelection() {
    return EditorSelection2.create(this.toSelectionRanges());
  }
  containsSelection(selection) {
    function rangeLiesWithinSelection(range, sel) {
      for (const selRange of sel) {
        if (selRange.from <= range.from && selRange.to >= range.to) {
          return true;
        }
      }
      return false;
    }
    const tabstopRanges = this.toSelectionRanges();
    let result = true;
    for (const range of selection.ranges) {
      if (!rangeLiesWithinSelection(range, tabstopRanges)) {
        result = false;
        break;
      }
    }
    return result;
  }
  map(changes) {
    this.decos = this.decos.map(changes);
    this.selections = this.selections.map((range) => {
      let rangeFrom = changes.mapPos(range.from, -1);
      let rangeTo = changes.mapPos(range.to, 1);
      return EditorSelection2.range(rangeFrom, rangeTo);
    });
  }
  getDecoRanges() {
    const ranges = [];
    const cur = this.decos.iter();
    while (cur.value != null) {
      if (cur.from != cur.to) {
        ranges.push(cur.value.range(cur.from, cur.to));
      } else {
        ranges.push(cur.value.range(cur.from));
      }
      cur.next();
    }
    return ranges;
  }
};
function tabstopSpecsToTabstopGroups(tabstops) {
  const tabstopsByNumber = {};
  for (const tabstop of tabstops) {
    const n = String(tabstop.number);
    if (tabstopsByNumber[n]) {
      tabstopsByNumber[n].push(tabstop);
    } else {
      tabstopsByNumber[n] = [tabstop];
    }
  }
  const result = [];
  const numbers = Object.keys(tabstopsByNumber);
  numbers.sort((a, b) => parseInt(a) - parseInt(b));
  for (const number of numbers) {
    const grp = new TabstopGroup(tabstopsByNumber[number]);
    result.push(grp);
  }
  return result;
}
function getEditorSelectionEndpoints(sel) {
  const endpoints = sel.ranges.map((range) => EditorSelection2.range(range.to, range.to));
  return EditorSelection2.create(endpoints);
}
var CursorWidget = class extends WidgetType {
  eq(widget) {
    return true;
  }
  toDOM(view) {
    const cursorEl = document.createElement("span");
    cursorEl.className = `${CURSOR_WIDGET_CLASS}`;
    cursorEl.textContent = "";
    return cursorEl;
  }
};

// src/main.ts
var EasyTypingPlugin = class extends Plugin {
  constructor() {
    super(...arguments);
    this.getDefaultIndentChar = () => {
      let useTab = this.app.vault.config.useTab === void 0 ? true : false;
      let tabSize = this.app.vault.config.tabSize == void 0 ? 4 : this.app.vault.config.tabSize;
      let default_indent = useTab ? "	" : " ".repeat(tabSize);
      return default_indent;
    };
    this.transactionFilterPlugin = (tr) => {
      const changes = [];
      if (!tr.docChanged)
        return tr;
      let selected = tr.startState.selection.asSingle().main.anchor != tr.startState.selection.asSingle().main.head;
      let changeTypeStr = getTypeStrOfTransac(tr);
      tr.changes.iterChanges((fromA, toA, fromB, toB, inserted) => {
        var _a, _b, _c, _d;
        let changedStr = tr.startState.sliceDoc(fromA, toA);
        let changestr_ = changedStr.replace(/\s/g, "0");
        let insertedStr = inserted.sliceString(0);
        if ((_a = this.settings) == null ? void 0 : _a.debug) {
          console.log("[TransactionFilter] type, fromA, toA, changed, fromB, toB, inserted");
          console.log(changeTypeStr, fromA, toA, changedStr, fromB, toB, insertedStr);
        }
        if (getPosLineType(tr.startState, fromA) == "table" /* table */)
          return tr;
        if (this.settings.SelectionEnhance) {
          if ((changeTypeStr == "input.type" || changeTypeStr == "input.type.compose") && fromA != toA && (fromB + 1 === toB || insertedStr == "\u2014\u2014" || insertedStr == "\u2026\u2026")) {
            if (this.SelectionReplaceMap.has(insertedStr)) {
              changes.push({ changes: { from: fromA, insert: (_b = this.SelectionReplaceMap.get(insertedStr)) == null ? void 0 : _b.left }, userEvent: "EasyTyping.change" });
              changes.push({ changes: { from: toA, insert: (_c = this.SelectionReplaceMap.get(insertedStr)) == null ? void 0 : _c.right }, userEvent: "EasyTyping.change" });
              tr = tr.startState.update(...changes);
              return tr;
            }
          }
        }
        if (this.settings.BetterCodeEdit && changeTypeStr.contains("paste") && fromA == fromB && isCodeBlockInPos(tr.startState, fromA)) {
          print("\u68C0\u6D4B\u5230\u5728\u4EE3\u7801\u5757\u4E2D\u7C98\u8D34");
          let line = tr.startState.doc.lineAt(fromB).text;
          let base_indent_num = (_d = getCodeBlockInfoInPos(tr.startState, fromA)) == null ? void 0 : _d.indent;
          let base_indent = base_indent_num == 0 ? "" : " ".repeat(base_indent_num);
          let inserted_lines = insertedStr.split("\n");
          if (inserted_lines.length > 1) {
            let min_indent_space = Infinity;
            for (let line2 of inserted_lines) {
              if (!/^\s*$/.test(line2)) {
                let indent = line2.match(/^\s*/)[0].length;
                min_indent_space = Math.min(min_indent_space, indent);
              }
            }
            let adjusted_lines = inserted_lines.map((line2, index) => {
              let trimmed_line = line2.substring(min_indent_space);
              trimmed_line = trimmed_line.replace(/[\t]/g, this.getDefaultIndentChar());
              if (index === 0) {
                return trimmed_line;
              } else {
                return base_indent + trimmed_line;
              }
            });
            let new_insertedStr = adjusted_lines.join("\n");
            changes.push({
              changes: { from: fromA, to: toA, insert: new_insertedStr },
              selection: { anchor: fromA + new_insertedStr.length },
              userEvent: "EasyTyping.change"
            });
            tr = tr.startState.update(...changes);
            return tr;
          }
        }
        if (this.settings.BaseObEditEnhance && changeTypeStr.contains("paste") && fromA == fromB && fromA == tr.startState.doc.lineAt(toA).to) {
          const lineContent = tr.startState.doc.lineAt(toA).text;
          const listMatch = lineContent.match(/^(\s*)([-*+] \[.\]|[-*+]|\d+\.)\s/);
          const quoteMatch = lineContent.match(/^(\s*)(>+)(\s)?/);
          if (listMatch || quoteMatch) {
            let prefix = listMatch ? listMatch[1] + listMatch[2] + " " : quoteMatch[1] + quoteMatch[2] + " ";
            let indent_num = listMatch ? listMatch[1].length : quoteMatch[1].length;
            let indent_str = indent_num == 0 ? "" : " ".repeat(indent_num);
            let inserted_lines = insertedStr.split("\n");
            let min_indent_space = Infinity;
            for (let line of inserted_lines) {
              if (!/^\s*$/.test(line)) {
                let indent = line.match(/^\s*/)[0].length;
                min_indent_space = Math.min(min_indent_space, indent);
              }
            }
            let paste_list = true;
            for (let line of inserted_lines) {
              if (line.match(/^(\s*)([-*+] \[.\]|[-*+]|\d+\.)\s/) || /^\s*$/.test(line)) {
                continue;
              } else {
                let indent = line.match(/^\s*/)[0].length;
                if (indent < min_indent_space + 2) {
                  paste_list = false;
                  break;
                }
              }
            }
            let adjusted_lines = [];
            if (paste_list && listMatch) {
              adjusted_lines = inserted_lines.map((line, index) => {
                let trimmed_line = line.substring(min_indent_space);
                trimmed_line = trimmed_line.replace(/[\t]/g, this.getDefaultIndentChar());
                if (index === 0) {
                  trimmed_line = trimmed_line.replace(/^([-*+] \[.\]|[-*+]|\d+\.)\s/, "");
                  return trimmed_line;
                } else {
                  return indent_str + trimmed_line;
                }
              });
            } else {
              adjusted_lines = inserted_lines.map((line, index) => {
                let trimmed_line = line.substring(min_indent_space);
                trimmed_line = trimmed_line.replace(/[\t]/g, this.getDefaultIndentChar());
                if (index === 0) {
                  return trimmed_line;
                } else {
                  return prefix + trimmed_line;
                }
              });
            }
            let new_insertedStr = adjusted_lines.join("\n");
            changes.push({
              changes: { from: fromA, to: toA, insert: new_insertedStr },
              selection: { anchor: fromA + new_insertedStr.length },
              userEvent: "EasyTyping.change"
            });
            tr = tr.startState.update(...changes);
            return tr;
          }
        }
        if (selected)
          return tr;
        if (this.settings.TryFixMSIME && changeTypeStr == "input.type.compose" && changedStr == "" && /^[\u4e00-\u9fa5]+$/.test(insertedStr)) {
          print("MS-IME Compose detected:", insertedStr);
          tr = tr.startState.update(...changes);
          return tr;
        }
        let codeblockinfo = getCodeBlockInfoInPos(tr.startState, toA);
        if (this.settings.BetterCodeEdit && changeTypeStr == "delete.backward" && !selected && codeblockinfo && toA > tr.startState.doc.lineAt(codeblockinfo.start_pos).to) {
          let line_number = tr.startState.doc.lineAt(toA).number;
          let cur_line = tr.startState.doc.lineAt(toA);
          let list_code_indent = codeblockinfo.indent;
          if (list_code_indent !== 0) {
            print("list_code, indent: ", list_code_indent);
            if (toA == cur_line.from + list_code_indent) {
              changes.push({ changes: { from: tr.startState.doc.line(line_number - 1).to, to: toA, insert: "" }, userEvent: "EasyTyping.change" });
              tr = tr.startState.update(...changes);
              return tr;
            }
            if (fromA >= cur_line.from && fromA < cur_line.from + list_code_indent && toA > cur_line.from + list_code_indent) {
              changes.push({ changes: { from: cur_line.from + list_code_indent, to: toA, insert: "" }, userEvent: "EasyTyping.change" });
              tr = tr.startState.update(...changes);
              return tr;
            }
          }
        }
        if (changeTypeStr === "delete.backward" && this.settings.IntrinsicSymbolPairs) {
          if (this.SymbolPairsMap.has(changedStr) && this.SymbolPairsMap.get(changedStr) === tr.startState.sliceDoc(toA, toA + 1)) {
            changes.push({ changes: { from: fromA, to: toA + 1 }, userEvent: "EasyTyping.change" });
            tr = tr.startState.update(...changes);
            return tr;
          }
          let line_content = tr.startState.doc.lineAt(toA).text;
          let next_line_content = tr.startState.doc.sliceString(toA, toA + line_content.length + 1);
          if (/^\s*```$/.test(line_content) && "\n" + line_content == next_line_content) {
            changes.push({
              changes: {
                from: toA - 3,
                to: toA + line_content.length + 1,
                insert: ""
              },
              selection: { anchor: toA - 3 },
              userEvent: "EasyTyping.change"
            });
            tr = tr.startState.update(...changes);
            return tr;
          }
          for (let rule of this.IntrinsicDeleteRules) {
            let left = tr.startState.doc.sliceString(toA - rule.before.left.length, toA);
            let right = tr.startState.doc.sliceString(toA, toA + rule.before.right.length);
            if (left === rule.before.left && right === rule.before.right) {
              changes.push({
                changes: {
                  from: toA - rule.before.left.length,
                  to: toA + rule.before.right.length,
                  insert: rule.after.left + rule.after.right
                },
                selection: { anchor: toA - rule.before.left.length + rule.after.left.length },
                userEvent: "EasyTyping.change"
              });
              tr = tr.startState.update(...changes);
              return tr;
            }
          }
        }
        if (changeTypeStr == "delete.backward") {
          for (let rule of this.UserDeleteRules) {
            let leftDocStr = tr.startState.doc.sliceString(0, toA);
            let rightDocStr = tr.startState.doc.sliceString(toA);
            let leftRegexpStr = rule.before.left;
            if (isRegexp(rule.before.left)) {
              leftRegexpStr = leftRegexpStr.slice(2, -1);
            } else {
              leftRegexpStr = leftRegexpStr.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            }
            let leftRegexp = new RegExp(leftRegexpStr + "$");
            let leftMatch = leftDocStr.match(leftRegexp);
            if (leftMatch) {
              let leftMatchStr = leftMatch[0];
              let matchList = leftMatch.slice(1);
              let matchPosBegin = toA - leftMatchStr.length;
              let rightRegexpStr = rule.before.right;
              if (isRegexp(rule.before.right)) {
                rightRegexpStr = rightRegexpStr.slice(2, -1);
              } else {
                rightRegexpStr = rightRegexpStr.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
              }
              let rightRegexp = new RegExp("^" + rightRegexpStr);
              let rightMatch = rightDocStr.match(rightRegexp);
              if (rightMatch) {
                let rightMatchStr = rightMatch[0];
                let matchPosEnd = toA + rightMatchStr.length;
                matchList.push(...rightMatch.slice(1));
                let [new_string, tabstops] = parseTheAfterPattern(rule.after_pattern, matchList);
                const updatedTabstops = tabstops.map((tabstop) => ({
                  ...tabstop,
                  from: tabstop.from + matchPosBegin,
                  to: tabstop.to + matchPosBegin
                }));
                let tabstopGroups = tabstopSpecsToTabstopGroups(updatedTabstops);
                changes.push({
                  changes: {
                    from: matchPosBegin,
                    to: matchPosEnd,
                    insert: new_string
                  },
                  selection: tabstopGroups[0].toEditorSelection(),
                  effects: [addTabstopsEffect.of(tabstopGroups)],
                  userEvent: "EasyTyping.change"
                });
                tr = tr.startState.update(...changes);
                return tr;
              }
            }
          }
        }
        if (changeTypeStr == "input.type" && insertedStr == "`\n```" && this.settings.BaseObEditEnhance) {
          const line_content = tr.startState.doc.lineAt(fromA).text;
          if (/^\s*``$/.test(line_content)) {
            changes.push({
              changes: { from: fromA, to: toA, insert: "`\n" + line_content + "`" },
              selection: { anchor: fromA + 1 },
              userEvent: "EasyTyping.change"
            });
            tr = tr.startState.update(...changes);
            return tr;
          }
        }
        if ((changeTypeStr == "input.type" || changeTypeStr == "input.type.compose") && fromA === toA && fromB + 1 === toB) {
          if (this.settings.BaseObEditEnhance) {
            if (insertedStr === "`" && toA - tr.startState.doc.lineAt(toA).from > 2 && tr.startState.sliceDoc(toA - 1, toA) === "`" && tr.startState.sliceDoc(toA - 2, toA - 1) != "`") {
              changes.push({
                changes: { from: toA, insert: "`" },
                selection: { anchor: toA },
                userEvent: "EasyTyping.change"
              });
              tr = tr.startState.update(...changes);
              return tr;
            }
            if (insertedStr == "\xB7") {
              let line_content = tr.startState.doc.lineAt(fromA).text;
              let ch_pos = fromA - tr.startState.doc.lineAt(fromA).from;
              if (/^\s*``$/.test(line_content) && ch_pos == line_content.length - 1) {
                changes.push({
                  changes: { from: fromA + 1, to: toA + 1, insert: "`\n" + line_content + "`" },
                  selection: { anchor: fromA + 2 },
                  userEvent: "EasyTyping.change"
                });
                tr = tr.startState.update(...changes);
                return tr;
              }
            }
            for (let rule of this.BasicConvRules) {
              if (insertedStr != rule.before.left.charAt(rule.before.left.length - 1))
                continue;
              if (rule.before.left.charAt(0) === "\n" && offsetToPos(tr.state.doc, fromA).line === 0 && toB - rule.before.left.length + 1 === 0) {
                let left = tr.state.doc.sliceString(toB - rule.before.left.length + 1, toB);
                let right = tr.state.doc.sliceString(toB, toB + rule.before.right.length);
                if (left === rule.before.left.substring(1) && right === rule.before.right) {
                  changes.push({
                    changes: {
                      from: toA - rule.before.left.length + 2,
                      to: toA + rule.before.right.length,
                      insert: rule.after.left.substring(1) + rule.after.right
                    },
                    selection: { anchor: toA - rule.before.left.length + rule.after.left.length + 1 },
                    userEvent: "EasyTyping.change"
                  });
                  tr = tr.startState.update(...changes);
                  return tr;
                }
              } else {
                let left = tr.state.doc.sliceString(toB - rule.before.left.length, toB);
                let right = tr.state.doc.sliceString(toB, toB + rule.before.right.length);
                if (left === rule.before.left && right === rule.before.right) {
                  changes.push({
                    changes: {
                      from: toA - rule.before.left.length + 1,
                      to: toA + rule.before.right.length,
                      insert: rule.after.left + rule.after.right
                    },
                    selection: { anchor: toA - rule.before.left.length + rule.after.left.length + 1 },
                    userEvent: "EasyTyping.change"
                  });
                  tr = tr.startState.update(...changes);
                  return tr;
                }
              }
            }
          }
          if (this.settings.IntrinsicSymbolPairs) {
            for (let rule of this.IntrinsicAutoPairRulesPatch) {
              if (insertedStr != rule.before.left.charAt(rule.before.left.length - 1))
                continue;
              let left = tr.state.doc.sliceString(toB - rule.before.left.length, toB);
              let right = tr.state.doc.sliceString(toB, toB + rule.before.right.length);
              if (left === rule.before.left && right === rule.before.right) {
                changes.push({
                  changes: {
                    from: toA - rule.before.left.length + 1,
                    to: toA + rule.before.right.length,
                    insert: rule.after.left + rule.after.right
                  },
                  selection: { anchor: toA - rule.before.left.length + rule.after.left.length + 1 },
                  userEvent: "EasyTyping.change"
                });
                tr = tr.startState.update(...changes);
                return tr;
              }
            }
            if (this.SymbolPairsMap.has(insertedStr) && insertedStr != "'") {
              changes.push({
                changes: { from: fromA, to: toA, insert: insertedStr + this.SymbolPairsMap.get(insertedStr) },
                selection: { anchor: fromA + 1 },
                userEvent: "EasyTyping.change"
              });
              tr = tr.startState.update(...changes);
              return tr;
            } else if (insertedStr === "'") {
              let charBeforeCursor = tr.startState.sliceDoc(fromA - 1, fromA);
              if (["", " ", "\n"].includes(charBeforeCursor)) {
                changes.push({
                  changes: { from: fromA, to: toA, insert: "''" },
                  selection: { anchor: fromA + 1 },
                  userEvent: "EasyTyping.change"
                });
                tr = tr.startState.update(...changes);
                return tr;
              }
            }
            if (insertedStr === "\u201D" || insertedStr === "\u2019") {
              let tempStr = insertedStr === "\u201D" ? "\u201C\u201D" : "\u2018\u2019";
              changes.push({
                changes: { from: fromA, to: toA, insert: tempStr },
                selection: { anchor: fromA + 1 },
                userEvent: "EasyTyping.change"
              });
              tr = tr.startState.update(...changes);
              return tr;
            }
          }
        }
      });
      return tr;
    };
    this.viewUpdatePlugin = (update) => {
      if (this.onFormatArticle === true)
        return;
      let cursor_changed = update.transactions.find((tr2) => tr2.selection) != null;
      if (hasTabstops(update.view) && (update.docChanged || cursor_changed) && !update.view.composing && !isInsideCurTabstop(update.view)) {
        removeAllTabstops(update.view);
      }
      if (hasTabstops(update.view) && update.transactions.find((tr2) => tr2.isUserEvent("undo"))) {
        removeAllTabstops(update.view);
      }
      let notSelected = true;
      let mainSelection = update.view.state.selection.asSingle().main;
      if (mainSelection.anchor != mainSelection.head)
        notSelected = false;
      if (!update.docChanged)
        return;
      let isExcludeFile = this.isCurrentFileExclude();
      let tr = update.transactions[0];
      let changeType = getTypeStrOfTransac(tr);
      tr.changes.iterChanges((fromA, toA, fromB, toB, inserted) => {
        var _a;
        let insertedStr = inserted.sliceString(0);
        let changedStr = tr.startState.doc.sliceString(fromA, toA);
        if ((_a = this.settings) == null ? void 0 : _a.debug) {
          console.log("[ViewUpdate] type, fromA, toA, changed, fromB, toB, inserted");
          console.log(changeType, fromA, toA, changedStr, fromB, toB, insertedStr);
          console.log("==>[Composing]", update.view.composing);
        }
        if (getPosLineType(update.view.state, fromB) == "table" /* table */) {
          return;
        }
        let cursor = update.view.state.selection.asSingle().main;
        if (update.view.composing) {
          if (this.compose_need_handle) {
            this.compose_end_pos = cursor.anchor;
          } else {
            this.compose_need_handle = true;
            this.compose_begin_pos = fromA;
            this.compose_end_pos = cursor.anchor;
          }
          return;
        }
        let change_from = fromB;
        let change_to = toB;
        let composeEnd = false;
        if (this.compose_need_handle) {
          composeEnd = true;
          this.compose_need_handle = false;
          change_from = this.compose_begin_pos;
          change_to = this.compose_end_pos;
        }
        if (changeType.contains("EasyTyping") || changeType == "undo" || changeType == "redo")
          return;
        if (changeType != "none" && notSelected && !changeType.includes("delete")) {
          if (this.triggerCvtRule(update.view, mainSelection.anchor))
            return;
          if (composeEnd && this.triggerPuncRectify(update.view, change_from))
            return;
          if (this.settings.AutoFormat && notSelected && !isExcludeFile && (changeType != "none" || insertedStr == "\n")) {
            if (getPosLineType(update.view.state, change_from) == "text" /* text */ || getPosLineType(update.view.state, change_from) == "table" /* table */) {
              let changes = this.Formater.formatLineOfDoc(update.state, this.settings, change_from, cursor.anchor, insertedStr);
              if (changes != null) {
                update.view.dispatch(...changes[0]);
                update.view.dispatch(changes[1]);
                return;
              }
            }
          }
        }
        if (this.settings.AutoFormat && !isExcludeFile && changeType == "input.paste" && !Platform.isIosApp) {
          let updateLineStart = update.state.doc.lineAt(fromB).number;
          let updateLineEnd = update.state.doc.lineAt(toB).number;
          if (updateLineStart == updateLineEnd && getPosLineType(update.view.state, toB) == "text" /* text */) {
            let changes = this.Formater.formatLineOfDoc(update.state, this.settings, fromB, toB, insertedStr);
            if (changes != null) {
              update.view.dispatch(...changes[0]);
              return;
            }
          } else {
            let all_changes = [];
            let inserted_array = insertedStr.split("\n");
            let update_start = fromB;
            for (let i = updateLineStart; i <= updateLineEnd; i++) {
              let real_inserted = inserted_array[i - updateLineStart];
              let changes = this.Formater.formatLineOfDoc(update.state, this.settings, update_start, update_start + real_inserted.length, real_inserted);
              if (changes != null) {
                all_changes.push(...changes[0]);
              }
              update_start += real_inserted.length + 1;
            }
            if (all_changes.length > 0) {
              update.view.dispatch(...all_changes);
              return;
            }
          }
        }
      });
    };
    this.handleTabDown = (view) => {
      if (consumeAndGotoNextTabstop(view)) {
        return true;
      }
      if (!this.settings.Tabout)
        return false;
      let state = view.state;
      let doc = state.doc;
      const tree = syntaxTree2(state);
      const s = view.state.selection;
      if (s.ranges.length > 1)
        return false;
      const pos = s.main.to;
      let line = doc.lineAt(pos);
      if (s.main.from == s.main.to && isCodeBlockInPos(state, pos)) {
        const default_indent = this.getDefaultIndentChar();
        view.dispatch({
          changes: {
            from: s.main.from,
            insert: default_indent
          },
          selection: {
            anchor: s.main.from + default_indent.length
          }
        });
        return true;
      }
      if (this.settings.BetterCodeEdit && pos - line.from != 0 && tree.resolve(pos - 1, 1).name.contains("inline-code")) {
        if (tree.resolve(pos, 1).name.contains("formatting-code_inline-code")) {
          view.dispatch({
            selection: { anchor: pos + 1, head: pos + 1 }
          });
          return true;
        }
        for (let p = pos + 1; p < line.to && tree.resolve(p, 1).name.contains("inline-code"); p += 1) {
          if (tree.resolve(p, 1).name.contains("formatting-code_inline-code")) {
            view.dispatch({
              selection: { anchor: p, head: p }
            });
            return true;
          }
          if (p == line.to - 1 && tree.resolve(p, 1).name.contains("inline-code")) {
            view.dispatch({
              selection: { anchor: p + 1, head: p + 1 }
            });
            return true;
          }
        }
      }
      let selection = view.state.selection.asSingle().main;
      let selected = selection.anchor != selection.head;
      if (selected) {
        let new_anchor = selection.anchor < selection.head ? selection.anchor : selection.head;
        let new_head = selection.anchor > selection.head ? selection.anchor : selection.head;
        for (let pstr of this.TaboutPairStrs) {
          if (doc.sliceString(new_anchor - pstr.left.length, new_anchor) == pstr.left && doc.sliceString(new_head, new_head + pstr.right.length) == pstr.right) {
            view.dispatch({
              selection: { anchor: new_head + pstr.right.length, head: new_head + pstr.right.length }
            });
            return true;
          }
        }
      } else {
        let taboutRes = taboutCursorInPairedString(line.text, pos - line.from, this.TaboutPairStrs);
        if (taboutRes.isSuccess) {
          view.dispatch({
            selection: { anchor: taboutRes.newPosition + line.from }
          });
          return true;
        }
      }
      return false;
    };
    this.handleEnter = (view) => {
      var _a, _b;
      let state = view.state;
      let doc = state.doc;
      const tree = syntaxTree2(state);
      const s = view.state.selection;
      if (s.ranges.length > 1)
        return false;
      const pos = s.main.to;
      let line = doc.lineAt(pos);
      let codeBlockInfo = getCodeBlockInfoInPos(state, pos);
      if (this.settings.CollapsePersistentEnter) {
        const editor = this.app.workspace.getActiveViewOfType(MarkdownView).editor;
        let fold_offsets = editor.getFoldOffsets();
        let all_foldable_lines = editor.getAllFoldableLines();
        let folded_lines = [];
        for (let offset of fold_offsets) {
          let folded = all_foldable_lines.find((l) => l.from == offset);
          if (folded) {
            folded_lines.push(folded);
          }
        }
        let folded_line = folded_lines.find((l) => pos >= l.from && pos <= l.to);
        if (folded_line) {
          let folded_first_line = doc.lineAt(folded_line.from).text;
          let reg_headings = /^#+ /;
          if (reg_headings.test(folded_first_line)) {
            let heading_level = (_a = folded_first_line.match(/^#+/)) == null ? void 0 : _a[0].length;
            let new_heading_level = heading_level;
            let new_heading_line = "\n" + "#".repeat(new_heading_level) + " ";
            let folded_last_line = doc.lineAt(folded_line.to).text;
            let folded_last_line_is_blank = /^\s*$/.test(folded_last_line);
            let new_heading_line_pos = editor.offsetToPos(folded_line.to);
            let new_cursor_pos = { line: new_heading_line_pos.line + 1, ch: new_heading_level + 1 };
            if (this.settings.StrictModeEnter && !folded_last_line_is_blank && (this.app.vault.config.strictLineBreaks || false)) {
              new_heading_line = "\n\n" + "#".repeat(new_heading_level) + " ";
              new_cursor_pos = { line: new_heading_line_pos.line + 2, ch: new_heading_level + 1 };
            }
            editor.replaceRange(new_heading_line, new_heading_line_pos);
            editor.setCursor(editor.offsetToPos(folded_line.from));
            editor.exec("toggleFold");
            editor.setCursor(new_cursor_pos);
            return true;
          }
        }
      }
      if (this.settings.BetterCodeEdit && codeBlockInfo && codeBlockInfo.code_start_pos !== doc.lineAt(codeBlockInfo.start_pos).to && pos >= codeBlockInfo.code_start_pos && pos <= codeBlockInfo.code_end_pos) {
        let line_indent_str = ((_b = line.text.match(/^\s*/)) == null ? void 0 : _b[0]) || "";
        view.dispatch({
          changes: { from: pos, to: pos, insert: "\n" + line_indent_str },
          selection: { anchor: pos + line_indent_str.length + 1, head: pos + line_indent_str.length + 1 },
          userEvent: "EasyTyping.handleEnter"
        });
        return true;
      }
      if (!this.settings.StrictModeEnter)
        return false;
      let strictLineBreaks = this.app.vault.config.strictLineBreaks || false;
      if (!strictLineBreaks)
        return false;
      if (/^\s*$/.test(line.text))
        return false;
      if (pos == line.from)
        return false;
      if (getPosLineType2(state, pos) == "quote" /* quote */) {
        let reg_quote = /^(\s*)(>+ ?)/;
        let quote_match = line.text.match(reg_quote);
        if (!quote_match)
          return false;
        let quote_indent_str = (quote_match == null ? void 0 : quote_match[1]) || "";
        let quote_level = (quote_match == null ? void 0 : quote_match[2].length) || 0;
        let quote_content = line.text.slice(quote_match[0].length);
        if (quote_content.trim() == "")
          return false;
        else {
          let space_str2 = "  ";
          if (quote_content.endsWith("  "))
            space_str2 = "";
          let inserted_str = space_str2 + "\n" + quote_match[0];
          if (this.settings.StrictLineMode == "enter_twice" /* EnterTwice */) {
            inserted_str = "\n" + quote_match[0] + "\n" + quote_match[0];
          }
          view.dispatch({
            changes: { from: pos, to: pos, insert: inserted_str },
            selection: { anchor: pos + inserted_str.length },
            userEvent: "EasyTyping.handleEnter"
          });
          return true;
        }
      }
      let space_str = "  ";
      if (line.text.endsWith("  "))
        space_str = "";
      if (line.number < doc.lines && !/^\s*$/.test(doc.line(line.number + 1).text)) {
        if (this.settings.StrictLineMode != "two_space" /* TwoSpace */)
          return false;
      }
      if (this.settings.StrictLineMode == "two_space" /* TwoSpace */ && getPosLineType2(state, pos) == "text" /* text */) {
        let inserted_str = space_str + "\n";
        view.dispatch({
          changes: { from: pos, to: pos, insert: inserted_str },
          selection: { anchor: pos + inserted_str.length, head: pos + inserted_str.length },
          userEvent: "EasyTyping.handleEnter"
        });
        return true;
      }
      if (getPosLineType2(state, pos) == "text" /* text */ || codeBlockInfo && pos == codeBlockInfo.end_pos && codeBlockInfo.indent == 0) {
        view.dispatch({
          changes: {
            from: pos,
            to: pos,
            insert: "\n\n"
          },
          selection: { anchor: pos + 2 },
          userEvent: "EasyTyping.handleEnter"
        });
        return true;
      }
      return false;
    };
    this.handleModA = (view) => {
      var _a;
      let selection = view.state.selection.main;
      let line = view.state.doc.lineAt(selection.anchor);
      let line_type = getPosLineType2(view.state, selection.anchor);
      let is_in_code_block = isCodeBlockInPos(view.state, selection.anchor);
      if (this.settings.EnhanceModA && line_type == "text" /* text */ && !is_in_code_block) {
        let [block_start, block_end] = this.getBlockLinesInPos(view.state, selection.head);
        if (selection.anchor <= view.state.doc.line(block_start).from && selection.head >= view.state.doc.line(block_end).to) {
          return false;
        }
        if (selection.anchor == line.from && selection.head == line.to) {
          if (block_start != block_end) {
            view.dispatch({
              selection: {
                anchor: view.state.doc.line(block_start).from,
                head: view.state.doc.line(block_end).to
              },
              userEvent: "EasyTyping.handleModA"
            });
            return true;
          }
          return false;
        }
        view.dispatch({
          selection: { anchor: line.from, head: line.to },
          userEvent: "EasyTyping.handleModA"
        });
        return true;
      }
      let quote_info = getQuoteInfoInPos(view.state, selection.head);
      if (this.settings.EnhanceModA && quote_info) {
        if (selection.anchor == quote_info.start_pos && selection.head == quote_info.end_pos) {
          return false;
        } else if (selection.anchor == quote_info.cur_start_pos && selection.head == quote_info.cur_end_pos) {
          view.dispatch({
            selection: { anchor: quote_info.start_pos, head: quote_info.end_pos },
            userEvent: "EasyTyping.handleModA"
          });
          return true;
        } else {
          view.dispatch({
            selection: { anchor: quote_info.cur_start_pos, head: quote_info.cur_end_pos },
            userEvent: "EasyTyping.handleModA"
          });
          return true;
        }
      }
      if (this.settings.EnhanceModA && line_type == "list" /* list */) {
        const reg_list = /^(\s*)([-*+] \[[^\]]\]|[-*+]|\d+\.)\s/;
        let reg_code_block = /^\s+```/;
        const listMatch = line.text.match(reg_list);
        if (!listMatch) {
          if (!reg_code_block.test(line.text)) {
            let cur_indent = ((_a = line.text.match(/^\s*/)) == null ? void 0 : _a[0].length) || 0;
            let selection_list = [];
            selection_list.push({ anchor: line.from + cur_indent, head: line.to });
            let list_start_line = line.number;
            for (let i = line.number - 1; i >= 1; i--) {
              const prevLine = view.state.doc.line(i);
              if (getPosLineType2(view.state, prevLine.from) == "list" /* list */) {
                list_start_line = i;
                break;
              }
            }
            let list_s_match = view.state.doc.line(list_start_line).text.match(reg_list);
            let list_s_start_idx = (list_s_match == null ? void 0 : list_s_match[0].length) || 0;
            selection_list.push({ anchor: view.state.doc.line(list_start_line).from + list_s_start_idx, head: line.to });
            if (selection.anchor <= selection_list[0].anchor && selection.head >= selection_list[0].head) {
              view.dispatch({ selection: selection_list[1], userEvent: "EasyTyping.handleModA" });
              return true;
            } else {
              view.dispatch({ selection: selection_list[0], userEvent: "EasyTyping.handleModA" });
              return true;
            }
          }
        } else {
          const cur_indent = listMatch[1].length;
          let selection_list = [];
          const contentStart = line.from + listMatch[0].length;
          selection_list.push({ anchor: contentStart, head: line.to });
          let endLine = line.number;
          for (let i = line.number + 1; i <= view.state.doc.lines; i++) {
            const nextLine = view.state.doc.line(i);
            const nextMatch = nextLine.text.match(/^(\s*)/);
            if (!nextMatch || nextMatch[0].length <= cur_indent)
              break;
            endLine = i;
          }
          let list_block_selection = { anchor: line.from, head: view.state.doc.line(endLine).to };
          selection_list.push(list_block_selection);
          let list_start_line = line.number;
          for (let i = line.number - 1; i >= 1; i--) {
            const prevLine = view.state.doc.line(i);
            const prevMatch = prevLine.text.match(/^(\s*)/);
            if (getPosLineType2(view.state, prevLine.from) == "list" /* list */ || prevMatch && prevMatch[0].length >= 2) {
              list_start_line = i;
            } else {
              break;
            }
          }
          let list_end_line = line.number;
          for (let i = line.number + 1; i <= view.state.doc.lines; i++) {
            const nextLine = view.state.doc.line(i);
            const nextMatch = nextLine.text.match(/^(\s*)/);
            if (getPosLineType2(view.state, nextLine.from) == "list" /* list */ || nextMatch && nextMatch[0].length >= 2) {
              list_end_line = i;
            } else {
              break;
            }
          }
          let list_all_selection = { anchor: view.state.doc.line(list_start_line).from, head: view.state.doc.line(list_end_line).to };
          if (list_all_selection.anchor != list_block_selection.anchor || list_all_selection.head != list_block_selection.head) {
            selection_list.push(list_all_selection);
          }
          selection_list.push({ anchor: 0, head: view.state.doc.length });
          let hit_idx = -1;
          for (let i = selection_list.length - 1; i >= 0; i--) {
            const sel = selection_list[i];
            if (selection.anchor <= sel.anchor && selection.head >= sel.head) {
              hit_idx = i;
              break;
            }
          }
          hit_idx += 1;
          if (hit_idx < selection_list.length) {
            view.dispatch({ selection: selection_list[hit_idx], userEvent: "EasyTyping.handleModA" });
            return true;
          }
          return false;
        }
      }
      if (!this.settings.BetterCodeEdit)
        return false;
      let mainSelection = view.state.selection.asSingle().main;
      return selectCodeBlockInPos(view, mainSelection);
    };
    this.onKeyup = (event, view) => {
      var _a;
      if ((_a = this.settings) == null ? void 0 : _a.debug) {
        console.log("Keyup:", event.key);
      }
      this.handleEndComposeTypeKey(event, view);
    };
    this.triggerCvtRule = (view, cursor_pos) => {
      let rules = [];
      if (this.settings.QuoteSpace)
        rules = rules.concat(this.ExtraBasicConvRules);
      if (this.settings.QuoteSpace)
        rules = rules.concat(this.QuoteSpaceRules);
      rules = rules.concat(this.UserConvertRules);
      for (let rule of rules) {
        let leftDocStr = view.state.doc.sliceString(0, cursor_pos);
        let rightDocStr = view.state.doc.sliceString(cursor_pos);
        let leftRegexpStr = rule.before.left;
        if (isRegexp(rule.before.left)) {
          leftRegexpStr = leftRegexpStr.slice(2, -1);
        } else {
          leftRegexpStr = leftRegexpStr.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        }
        let leftRegexp = new RegExp(leftRegexpStr + "$");
        let leftMatch = leftDocStr.match(leftRegexp);
        if (leftMatch) {
          let leftMatchStr = leftMatch[0];
          let matchList = leftMatch.slice(1);
          let matchPosBegin = cursor_pos - leftMatchStr.length;
          let rightRegexpStr = rule.before.right;
          if (isRegexp(rule.before.right)) {
            rightRegexpStr = rightRegexpStr.slice(2, -1);
          } else {
            rightRegexpStr = rightRegexpStr.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          }
          let rightRegexp = new RegExp("^" + rightRegexpStr);
          let rightMatch = rightDocStr.match(rightRegexp);
          if (rightMatch) {
            let rightMatchStr = rightMatch[0];
            let matchPosEnd = cursor_pos + rightMatchStr.length;
            matchList.push(...rightMatch.slice(1));
            let [new_string, tabstops] = parseTheAfterPattern(rule.after_pattern, matchList);
            const updatedTabstops = tabstops.map((tabstop) => ({
              ...tabstop,
              from: tabstop.from + matchPosBegin,
              to: tabstop.to + matchPosBegin
            }));
            view.dispatch({
              changes: {
                from: matchPosBegin,
                to: matchPosEnd,
                insert: new_string
              },
              userEvent: "EasyTyping.change"
            });
            addTabstopsAndSelect(view, tabstopSpecsToTabstopGroups(updatedTabstops));
            return true;
          }
        }
      }
      return false;
    };
    this.triggerPuncRectify = (view, change_from_pos) => {
      if (this.settings.PuncRectify && /[,.?!]/.test(view.state.doc.sliceString(change_from_pos - 1, change_from_pos))) {
        let punc = view.state.doc.sliceString(change_from_pos - 1, change_from_pos);
        if (change_from_pos > 2 && /[^\u4e00-\u9fa5]/.test(view.state.doc.sliceString(change_from_pos - 2, change_from_pos - 1))) {
        } else {
          view.dispatch({
            changes: {
              from: change_from_pos - 1,
              to: change_from_pos,
              insert: this.halfToFullSymbolMap.get(punc)
            },
            userEvent: "EasyTyping.change"
          });
          return true;
        }
      }
      return false;
    };
    this.handleEndComposeTypeKey = (event, view) => {
      if ((["Enter", "Process", " ", "Shift"].contains(event.key) || /\d/.test(event.key)) && this.compose_need_handle) {
        let cursor = view.state.selection.asSingle().main;
        if (cursor.head != cursor.anchor)
          return;
        let insertedStr = view.state.doc.sliceString(this.compose_begin_pos, cursor.anchor);
        this.compose_need_handle = false;
        if (this.triggerCvtRule(view, cursor.anchor))
          return;
        if (this.triggerPuncRectify(view, this.compose_begin_pos))
          return;
        if (this.settings.AutoFormat && !this.isCurrentFileExclude()) {
          if (getPosLineType(view.state, cursor.anchor) != "text" /* text */)
            return;
          let changes = this.Formater.formatLineOfDoc(view.state, this.settings, this.compose_begin_pos, cursor.anchor, insertedStr);
          if (changes != null) {
            view.dispatch(...changes[0]);
            view.dispatch(changes[1]);
            return;
          }
        }
      }
    };
    this.formatArticle = async (editor, view) => {
      try {
        const { ArticleFormatter } = await import("./chunk-article-formatter-KSY5ZXS7.js");
        const formatter = new ArticleFormatter(this.settings);
        await formatter.formatArticle(editor, view);
      } catch (error) {
        console.error("Failed to load article formatter:", error);
        new Notice("Red Panda Formatter: \u8F09\u5165\u683C\u5F0F\u5316\u6A21\u7D44\u5931\u6557", 3e3);
      }
    };
    this.formatSelectionOrCurLine = async (editor, view) => {
      try {
        const { ArticleFormatter } = await import("./chunk-article-formatter-KSY5ZXS7.js");
        const formatter = new ArticleFormatter(this.settings);
        formatter.formatSelectionOrCurLine(editor, view);
      } catch (error) {
        console.error("Failed to load article formatter:", error);
        new Notice("Red Panda Formatter: \u8F09\u5165\u683C\u5F0F\u5316\u6A21\u7D44\u5931\u6557", 3e3);
      }
    };
    this.deleteBlankLines = async (editor) => {
      try {
        const { ArticleFormatter } = await import("./chunk-article-formatter-KSY5ZXS7.js");
        const formatter = new ArticleFormatter(this.settings);
        formatter.deleteBlankLines(editor);
      } catch (error) {
        console.error("Failed to load article formatter:", error);
        new Notice("Red Panda Formatter: \u8F09\u5165\u683C\u5F0F\u5316\u6A21\u7D44\u5931\u6557", 3e3);
      }
    };
    this.userRulesProcessor = null;
    this.getEditor = () => {
      let editor = null;
      let markdownView = this.app.workspace.getActiveViewOfType(MarkdownView);
      if (markdownView) {
        editor = markdownView.editor;
      }
      if (editor === null)
        console.log("can't get editor");
      return editor;
    };
  }
  async onload() {
    await this.loadSettings();
    this.selectionReplaceMapInitalData = [
      ["\u3010", { left: "[", right: "]" }],
      ["\uFFE5", { left: "$", right: "$" }],
      ["\xB7", { left: "`", right: "`" }],
      ["\xA5", { left: "$", right: "$" }],
      ["\u300A", { left: "\u300A", right: "\u300B" }],
      ["\u201C", { left: "\u201C", right: "\u201D" }],
      ["\u201D", { left: "\u201C", right: "\u201D" }],
      ["\uFF08", { left: "\uFF08", right: "\uFF09" }],
      ["<", { left: "<", right: ">" }],
      ['"', { left: '"', right: '"' }],
      ["'", { left: "'", right: "'" }],
      ["\u300C", { left: "\u300C", right: "\u300D" }],
      ["\u300E", { left: "\u300E", right: "\u300F" }]
    ];
    this.refreshSelectionReplaceRule();
    this.SymbolPairsMap = /* @__PURE__ */ new Map();
    let SymbolPairs = ["\u3010\u3011", "\uFF08\uFF09", "\u300A\u300B", "\u201C\u201D", "\u2018\u2019", "\u300C\u300D", "\u300E\u300F", "[]", "()", "{}", '""', "''"];
    for (let pairStr of SymbolPairs)
      this.SymbolPairsMap.set(pairStr.charAt(0), pairStr.charAt(1));
    this.halfToFullSymbolMap = /* @__PURE__ */ new Map([
      [".", "\u3002"],
      [",", "\uFF0C"],
      ["?", "\uFF1F"],
      ["!", "\uFF01"]
    ]);
    let BasicConvRuleStringList = [
      ["\xB7\xB7|", "`|`"],
      ["\uFF01\u3010\u3010|\u3011", "![[|]]"],
      ["\uFF01\u3010\u3010|", "![[|]]"],
      ["\u3010\u3010|\u3011", "[[|]]"],
      ["\u3010\u3010|", "[[|]]"],
      ["\uFFE5\uFFE5|", "$|$"],
      ["$\uFFE5|$", "$$\n|\n$$"],
      ["\xA5\xA5|", "$|$"],
      ["$\xA5|$", "$$\n|\n$$"],
      ["$$|$", "$$\n|\n$$"],
      ["$$|", "$|$"],
      ["\n\u300B|", "\n> |"],
      ["\n\u3001|", "\n/|"]
    ];
    let ExtraBasicConvRuleStringList = [["r/(?<=^|\\n)(\\s*>*) ?[>\u300B]/|", "[[0]]> |"]];
    let QuoteSpaceRuleStringList = [["r/(?<=^|\\n)(\\s*>+)([^ >\u300B]+)/|", "[[0]] [[1]]|"]];
    this.ExtraBasicConvRules = ruleStringList2RuleList(ExtraBasicConvRuleStringList);
    this.QuoteSpaceRules = ruleStringList2RuleList(QuoteSpaceRuleStringList);
    this.BasicConvRules = ruleStringList2RuleList(BasicConvRuleStringList);
    let DeleteRulesStrList = [["$|$", "|"], ["==|==", "|"], ["$$\n|\n$$", "|"]];
    this.IntrinsicDeleteRules = ruleStringList2RuleList(DeleteRulesStrList);
    let autoPairRulesPatchStrList = [
      ["\u3010\u3011|\u3011", "\u3010\u3011|"],
      ["\uFF08\uFF09|\uFF09", "\uFF08\uFF09|"],
      ["<>|>", "<>|"],
      ["\u300A\u300B|\u300B", "\u300A\u300B|"],
      ["\u300C\u300D|\u300D", "\u300C\u300D|"],
      ["\u300E\u300F|\u300F", "\u300E\u300F|"],
      ["()|)", "()|"],
      ["[]|]", "[]|"],
      ["{}|}", "{}|"],
      ["''|'", "''|"],
      ['""|"', '""|']
    ];
    this.IntrinsicAutoPairRulesPatch = ruleStringList2RuleList(autoPairRulesPatchStrList);
    let TaboutPairStrs = [
      "\u3010|\u3011",
      "\uFF08|\uFF09",
      "\u300A|\u300B",
      "\u201C|\u201D",
      "\u2018|\u2019",
      "\u300C|\u300D",
      "\u300E|\u300F",
      "'|'",
      '"|"',
      "$$|$$",
      "$|$",
      "__|__",
      "_|_",
      "==|==",
      "~~|~~",
      "**|**",
      "*|*",
      "[[|]]",
      "[|]",
      "{|}",
      "(|)",
      "<|>"
    ];
    this.TaboutPairStrs = TaboutPairStrs.map((s) => string2pairstring(s));
    this.UserDeleteRules = [];
    this.UserConvertRules = [];
    this.loadUserRulesAsync();
    this.CurActiveMarkdown = "";
    this.compose_need_handle = false;
    this.Formater = new LineFormater();
    this.onFormatArticle = false;
    if (!this.settings) {
      console.error("EasyTyping: Settings not loaded properly, using defaults");
      this.settings = Object.assign({}, DEFAULT_SETTINGS);
    }
    setDebug(this.settings.debug);
    this.registerEditorExtension([
      EditorState.transactionFilter.of(this.transactionFilterPlugin),
      EditorView3.updateListener.of(this.viewUpdatePlugin),
      Prec.highest(EditorView3.domEventHandlers({
        "keyup": this.onKeyup
      })),
      tabstopsStateField.extension
    ]);
    this.registerEditorExtension(Prec.highest(keymap.of([
      {
        key: "Tab",
        run: (view) => {
          const success = this.handleTabDown(view);
          return success;
        }
      },
      {
        key: "Enter",
        run: (view) => {
          const success = this.handleEnter(view);
          return success;
        }
      },
      {
        key: "Mod-a",
        run: (view) => {
          const success = this.handleModA(view);
          return success;
        }
      },
      {
        key: "Backspace",
        run: (view) => {
          if (!this.settings.BetterBackspace)
            return false;
          return this.handleBackspace(view);
        }
      },
      {
        key: "Shift-Enter",
        run: (view) => {
          const success = this.handleShiftEnter(view);
          return success;
        }
      }
    ])));
    this.lang = window.localStorage.getItem("language");
    let command_name_map = this.getCommandNameMap();
    this.addCommand({
      id: "easy-typing-format-article",
      name: command_name_map.get("format_article"),
      editorCallback: (editor, view) => {
        this.formatArticle(editor, view);
      },
      hotkeys: [{
        modifiers: ["Mod", "Shift"],
        key: "s"
      }]
    });
    this.addCommand({
      id: "easy-typing-select-block",
      name: command_name_map.get("select_block"),
      editorCallback: (editor, view) => {
        this.selectBlockInCurser(editor.cm);
      }
    });
    this.addCommand({
      id: "easy-typing-format-selection",
      name: command_name_map.get("format_selection"),
      editorCallback: (editor, view) => {
        this.formatSelectionOrCurLine(editor, view);
      },
      hotkeys: [{
        modifiers: ["Mod", "Shift"],
        key: "l"
      }]
    });
    this.addCommand({
      id: "easy-typing-delete-blank-line",
      name: command_name_map.get("delete_blank_line"),
      editorCallback: (editor, view) => {
        this.deleteBlankLines(editor);
      },
      hotkeys: [{
        modifiers: ["Mod", "Shift"],
        key: "k"
      }]
    });
    this.addCommand({
      id: "easy-typing-goto-new-line-after-cur-line",
      name: command_name_map.get("goto_new_line_after_cur_line"),
      editorCallback: (editor, view) => {
        this.goNewLineAfterCurLine(editor.cm);
      },
      hotkeys: [{ modifiers: ["Mod"], key: "Enter" }]
    });
    this.addCommand({
      id: "easy-typing-insert-codeblock",
      name: command_name_map.get("insert_codeblock"),
      editorCallback: (editor, view) => {
        this.convert2CodeBlock(editor);
      },
      hotkeys: [{
        modifiers: ["Mod", "Shift"],
        key: "n"
      }]
    });
    this.addCommand({
      id: "easy-typing-format-switch",
      name: command_name_map.get("switch_autoformat"),
      callback: () => this.switchAutoFormatting(),
      hotkeys: [{
        modifiers: ["Ctrl"],
        key: "tab"
      }]
    });
    this.addCommand({
      id: "easy-typing-paste-without-format",
      name: command_name_map.get("paste_wo_format"),
      editorCallback: (editor) => this.normalPaste(editor),
      hotkeys: [
        {
          modifiers: ["Mod", "Shift"],
          key: "v"
        }
      ]
    });
    this.addCommand({
      id: "easy-typing-toggle-comment",
      name: command_name_map.get("toggle_comment"),
      editorCallback: (editor, view) => this.toggleComment(editor.cm),
      hotkeys: [{ modifiers: ["Mod"], key: "/" }]
    });
    this.addSettingTab(new EasyTypingSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => {
      var _a;
      if (leaf.view.getViewType() == "markdown") {
        let file = this.app.workspace.getActiveFile();
        if (file != null && this.CurActiveMarkdown != file.path) {
          this.CurActiveMarkdown = file.path;
          if ((_a = this.settings) == null ? void 0 : _a.debug)
            new Notice("new md-file open: " + file.path);
        }
      }
    }));
    if (Platform.isMacOS && this.settings.FixMacOSContextMenu) {
      this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
        if (editor.listSelections().length != 1)
          return;
        let selection = editor.listSelections()[0];
        let selected = editor.getSelection();
        if (selected == "\n") {
          editor.setSelection(selection.anchor, selection.anchor);
        }
      }));
    }
    console.log("Easy Typing Plugin loaded.");
  }
  onunload() {
    console.log("Easy Typing Plugin unloaded.");
  }
  async normalPaste(editor) {
    var _a;
    let clipboardText = await navigator.clipboard.readText();
    if (clipboardText === null || clipboardText === "")
      return;
    if ((_a = this.settings) == null ? void 0 : _a.debug)
      console.log("Normal Paste!!");
    const editorView = editor.cm;
    let mainSelection = editorView.state.selection.asSingle().main;
    editorView.dispatch({
      changes: { from: mainSelection.from, to: mainSelection.to, insert: clipboardText },
      selection: { anchor: mainSelection.from + clipboardText.length },
      userEvent: "EasyTyping.paste"
    });
  }
  getBlockLinesInPos(state, pos) {
    const strictLineBreaks = this.app.vault.config.strictLineBreaks || false;
    let line = state.doc.lineAt(pos);
    let block_start = line.number;
    let block_end = line.number;
    let reg_headings = /^#+ /;
    for (let i = line.number - 1; i >= 1; i--) {
      let line2 = state.doc.line(i);
      if (getPosLineType2(state, line2.from) == "text" /* text */ && line2.text !== "" && !reg_headings.test(line2.text)) {
        block_start = i;
        continue;
      }
      break;
    }
    for (let i = line.number + 1; i <= state.doc.lines; i++) {
      let line2 = state.doc.line(i);
      if (getPosLineType2(state, line2.from) == "text" /* text */ && line2.text !== "" && !reg_headings.test(line2.text)) {
        block_end = i;
        continue;
      }
      break;
    }
    return [block_start, block_end];
  }
  selectBlockInCurser(view) {
    let selection = view.state.selection.main;
    let line = view.state.doc.lineAt(selection.head);
    if (/^\s*$/.test(line.text))
      return false;
    let [block_start, block_end] = this.getBlockLinesInPos(view.state, selection.head);
    view.dispatch({
      selection: { anchor: view.state.doc.line(block_start).from, head: view.state.doc.line(block_end).to },
      userEvent: "EasyTyping.selectBlockInCurser"
    });
    return true;
  }
  toggleComment(view) {
    const state = view.state;
    const selection = state.selection.main;
    const codeBlockInfo = getCodeBlockInfoInPos(state, selection.from);
    if (codeBlockInfo) {
      return this.toggleCodeBlockComment(view);
    }
    return this.toggleMarkdownComment(selection.from, selection.to, view);
  }
  toggleCodeBlockComment(view) {
    const state = view.state;
    const selection = state.selection.main;
    const codeBlockInfo = getCodeBlockInfoInPos(state, selection.from);
    if (!codeBlockInfo)
      return false;
    const language = codeBlockInfo.language;
    const commentSymbol = this.getCommentSymbol(language.toLowerCase());
    if (!commentSymbol)
      return false;
    let changes = [];
    if (selection.from === selection.to) {
      const line = state.doc.lineAt(selection.from);
      let change = this.toggleCodeBlockLineComment(line.from, line.to, state.doc.sliceString(line.from, line.to), commentSymbol, selection.from);
      if (change && change.selection) {
        changes.push(change);
        view.dispatch({
          changes,
          selection: change.selection,
          userEvent: "EasyTyping.toggleComment"
        });
        return true;
      } else if (change) {
        changes.push(change);
      }
    } else {
      const fromLine = state.doc.lineAt(selection.from);
      const toLine = state.doc.lineAt(selection.to);
      for (let i = fromLine.number; i <= toLine.number; i++) {
        const line = state.doc.line(i);
        let change = this.toggleCodeBlockLineComment(line.from, line.to, state.doc.sliceString(line.from, line.to), commentSymbol);
        if (change) {
          changes.push(change);
        }
      }
    }
    view.dispatch({ changes, userEvent: "EasyTyping.toggleComment" });
    return true;
  }
  toggleCodeBlockLineComment(from, to, text, commentSymbol, cursor_pos) {
    if (text.trim() == "" && cursor_pos) {
      if (typeof commentSymbol === "string") {
        let new_pos = cursor_pos + commentSymbol.length + 1;
        return {
          from: cursor_pos,
          to: cursor_pos,
          insert: commentSymbol + " ",
          selection: { anchor: new_pos, head: new_pos }
        };
      } else {
        let new_pos = cursor_pos + commentSymbol.start.length + 1;
        return {
          from: cursor_pos,
          to: cursor_pos,
          insert: commentSymbol.start + "  " + commentSymbol.end,
          selection: { anchor: new_pos, head: new_pos }
        };
      }
    }
    if (text.trim() == "")
      return null;
    if (typeof commentSymbol === "string") {
      const trimmedText = text.trimStart();
      if (trimmedText.startsWith(commentSymbol)) {
        const commentIndex = text.indexOf(commentSymbol);
        return {
          from: from + commentIndex,
          to: from + commentIndex + commentSymbol.length + (trimmedText.startsWith(commentSymbol + " ") ? 1 : 0),
          insert: ""
        };
      } else {
        const indent = text.length - trimmedText.length;
        return {
          from: from + indent,
          to: from + indent,
          insert: commentSymbol + " "
        };
      }
    } else {
      const trimmedText = text.trim();
      if (trimmedText.startsWith(commentSymbol.start) && trimmedText.endsWith(commentSymbol.end)) {
        const commentStartIndex = text.indexOf(commentSymbol.start);
        return {
          from: from + commentStartIndex,
          to,
          insert: trimmedText.slice(commentSymbol.start.length + 1, -commentSymbol.end.length - 1)
        };
      } else {
        const indent = text.length - text.trimStart().length;
        return {
          from: from + indent,
          to,
          insert: `${commentSymbol.start} ${trimmedText} ${commentSymbol.end}`
        };
      }
    }
  }
  toggleMarkdownComment(from, to, view) {
    const state = view.state;
    const doc = state.doc;
    const changes = [];
    if (from === to) {
      const currentText = doc.sliceString(from - 3, to + 3);
      if (currentText === "%%  %%") {
        changes.push({
          from: from - 3,
          to: to + 3,
          insert: ""
        });
        view.dispatch({
          changes,
          selection: { anchor: from - 3, head: from - 3 },
          userEvent: "EasyTyping.toggleComment"
        });
        return true;
      }
      changes.push({
        from,
        to,
        insert: "%%  %%"
      });
      const newPos = from + 3;
      view.dispatch({
        changes,
        selection: { anchor: newPos, head: newPos },
        userEvent: "EasyTyping.toggleComment"
      });
    } else {
      const selectedText = doc.sliceString(from, to);
      if (selectedText.startsWith("%%") && selectedText.endsWith("%%")) {
        changes.push({
          from,
          to,
          insert: selectedText.slice(2, -2)
        });
      } else {
        changes.push({
          from,
          to,
          insert: `%%${selectedText}%%`
        });
      }
      view.dispatch({ changes, userEvent: "EasyTyping.toggleComment" });
    }
    return true;
  }
  getCommentSymbol(language) {
    const commentSymbols = {
      "js": "//",
      "javascript": "//",
      "ts": "//",
      "typescript": "//",
      "py": "#",
      "python": "#",
      "rb": "#",
      "ruby": "#",
      "java": "//",
      "c": "//",
      "cpp": "//",
      "cs": "//",
      "go": "//",
      "rust": "//",
      "swift": "//",
      "kotlin": "//",
      "php": "//",
      "css": { start: "/*", end: "*/" },
      "scss": { start: "/*", end: "*/" },
      "sql": "--",
      "shell": "#",
      "bash": "#",
      "powershell": "#",
      "html": { start: "<!--", end: "-->" },
      "matlab": "%",
      "markdown": { start: "%%", end: "%%" }
    };
    return commentSymbols[language] || null;
  }
  handleShiftEnter(view) {
    const state = view.state;
    const doc = state.doc;
    const selection = state.selection.main;
    if (selection.anchor != selection.head)
      return false;
    const line = doc.lineAt(selection.head);
    const lineContent = line.text;
    const taskListMatch = lineContent.match(/^(\s*)([-*+] \[.\])\s/);
    if (taskListMatch) {
      const [, indent, listMarker] = taskListMatch;
      let inserted = "\n" + indent + "  ";
      view.dispatch({
        changes: [{ from: selection.anchor, insert: inserted }],
        selection: { anchor: selection.anchor + inserted.length, head: selection.anchor + inserted.length },
        userEvent: "EasyTyping.handleShiftEnter"
      });
      return true;
    }
    return false;
  }
  goNewLineAfterCurLine(view) {
    const state = view.state;
    const doc = state.doc;
    const selection = state.selection.main;
    const line = doc.lineAt(selection.head);
    const lineContent = line.text;
    const listMatch = lineContent.match(/^(\s*)([-*+] \[.\]|[-*+]|\d+\.)\s/);
    const quoteMatch = lineContent.match(/^(\s*)(>+ ?)/);
    let changes;
    let newCursorPos;
    let prefix = "";
    if (listMatch) {
      const [, indent, listMarker] = listMatch;
      if (["-", "*", "+"].includes(listMarker)) {
        prefix = indent + listMarker + " ";
      } else if (listMarker.match(/[-*+] \[.\]/)) {
        prefix = indent + listMarker.replace(/\[.\]/g, "[ ]") + " ";
      } else {
        prefix = indent + (parseInt(listMarker) + 1) + ". ";
      }
    } else if (quoteMatch) {
      prefix = quoteMatch[1] + quoteMatch[2];
    }
    changes = [{ from: line.to, insert: "\n" + prefix }];
    newCursorPos = line.to + 1 + prefix.length;
    const tr = state.update({
      changes,
      selection: { anchor: newCursorPos, head: newCursorPos },
      userEvent: "EasyTyping.goNewLineAfterCurLine"
    });
    view.dispatch(tr);
    return true;
  }
  handleBackspace(view) {
    const state = view.state;
    const doc = state.doc;
    const selection = state.selection.main;
    if (selection.anchor != selection.head)
      return false;
    const line = doc.lineAt(selection.from);
    const lineContent = line.text;
    const listMatchEmpty = lineContent.match(/^\s*([-*+]|\d+\.) $/);
    const quoteMatchEmpty = lineContent.match(/^(\s*)(>+) ?$/);
    if ((listMatchEmpty || quoteMatchEmpty) && selection.anchor == line.to) {
      let changes;
      let newCursorPos;
      if (quoteMatchEmpty) {
        const quote_indent_str = quoteMatchEmpty[1];
        const quoteLevel = quoteMatchEmpty[2].length;
        if (quoteLevel > 1) {
          if (line.number > 1) {
            const prevLine = doc.line(line.number - 1);
            const prevLineContent = prevLine.text;
            const prevQuoteMatchEmpty = prevLineContent.match(/^(\s*)(>+) ?$/);
            if (prevQuoteMatchEmpty && prevQuoteMatchEmpty[1] == quote_indent_str && prevQuoteMatchEmpty[2].length == quoteLevel) {
              let temp_line = quote_indent_str + ">".repeat(quoteLevel - 1) + " ";
              let inseted = temp_line + "\n" + temp_line;
              changes = [{ from: prevLine.from, to: line.to, insert: inseted }];
              newCursorPos = prevLine.from + inseted.length;
            } else {
              const newQuotePrefix = ">".repeat(quoteLevel - 1) + " ";
              changes = [{ from: line.from, to: line.to, insert: newQuotePrefix }];
              newCursorPos = line.from + newQuotePrefix.length;
            }
          } else {
            const newQuotePrefix = ">".repeat(quoteLevel - 1) + " ";
            changes = [{ from: line.from, to: line.to, insert: newQuotePrefix }];
            newCursorPos = line.from + newQuotePrefix.length;
          }
        } else {
          if (line.number > 1) {
            const prevLine = doc.line(line.number - 1);
            const prevLineContent = prevLine.text;
            const prevQuoteMatch = prevLineContent.match(/^\s*(>+)/);
            if (prevQuoteMatch) {
              changes = [{ from: prevLine.to, to: line.to, insert: "" }];
              newCursorPos = prevLine.to;
            } else {
              changes = [{ from: line.from, to: line.to, insert: "" }];
              newCursorPos = line.from;
            }
          } else {
            changes = [{ from: line.from, to: line.to, insert: "" }];
            newCursorPos = line.from;
          }
        }
      } else {
        if (line.number > 1) {
          const prevLine = doc.line(line.number - 1);
          const prevLineContent = prevLine.text;
          const prevListMatch = prevLineContent.match(/^\s*([-*+]|\d+\.)\s/);
          if (prevListMatch) {
            changes = [{ from: prevLine.to, to: line.to, insert: "" }];
            newCursorPos = prevLine.to;
          } else {
            changes = [{ from: line.from, to: line.to, insert: "" }];
            newCursorPos = line.from;
          }
        } else {
          changes = [{ from: line.from, to: line.to, insert: "" }];
          newCursorPos = line.from;
        }
        let nextLineNumber = line.number + 1;
        const currentIndent = lineContent.match(/^\s*/)[0];
        const currentListMatch = lineContent.match(/^\s*(\d+)\.\s/);
        let expectedNextNumber = currentListMatch ? parseInt(currentListMatch[1], 10) + 1 : null;
        while (nextLineNumber <= doc.lines && expectedNextNumber !== null) {
          const nextLine = doc.line(nextLineNumber);
          const nextLineContent = nextLine.text;
          const nextListMatch = nextLineContent.match(/^\s*(\d+)\.\s/);
          if (nextListMatch) {
            const nextIndent = nextLineContent.match(/^\s*/)[0];
            if (nextIndent !== currentIndent) {
              break;
            }
            const nextListNumber = parseInt(nextListMatch[1], 10);
            if (nextListNumber === expectedNextNumber) {
              const newNextLineContent = nextLineContent.replace(/^\s*\d+\.\s/, `${nextIndent}${nextListNumber - 1}. `);
              changes.push({ from: nextLine.from, to: nextLine.to, insert: newNextLineContent });
              expectedNextNumber++;
            } else {
              break;
            }
          } else {
            break;
          }
          nextLineNumber++;
        }
      }
      const tr = state.update({
        changes,
        selection: { anchor: newCursorPos, head: newCursorPos },
        userEvent: "EasyTyping.handleBackspace"
      });
      view.dispatch(tr);
      return true;
    }
    return false;
  }
  isCurrentFileExclude() {
    if (this.CurActiveMarkdown == "") {
      let file = this.app.workspace.getActiveFile();
      if (file != null && this.CurActiveMarkdown != file.path) {
        this.CurActiveMarkdown = file.path;
      } else {
        return true;
      }
    }
    let excludePaths = this.settings.ExcludeFiles.split("\n");
    for (let epath of excludePaths) {
      if (epath.charAt(0) == "/")
        epath = epath.substring(1);
      if (this.CurActiveMarkdown == epath)
        return true;
      let len = epath.length;
      if (this.CurActiveMarkdown.substring(0, len) == epath && (this.CurActiveMarkdown.charAt(len) == "/" || this.CurActiveMarkdown.charAt(len) == "\\" || epath.charAt(len - 1) == "/" || epath.charAt(len - 1) == "\\")) {
        return true;
      }
    }
    return false;
  }
  switchAutoFormatting() {
    this.settings.AutoFormat = !this.settings.AutoFormat;
    let status = this.settings.AutoFormat ? "on" : "off";
    new Notice("EasyTyping: Autoformat is " + status + "!");
  }
  convert2CodeBlock(editor) {
    var _a;
    if ((_a = this.settings) == null ? void 0 : _a.debug)
      console.log("----- EasyTyping: insert code block-----");
    if (editor.somethingSelected && editor.getSelection() != "") {
      let selected = editor.getSelection();
      let selectedRange = editor.listSelections()[0];
      let anchor = selectedRange.anchor;
      let head = selectedRange.head;
      let replacement = "```\n" + selected + "\n```";
      if (anchor.line > head.line || anchor.line == head.line && anchor.ch > head.ch) {
        let temp = anchor;
        anchor = head;
        head = temp;
      }
      let dstLine = anchor.line;
      if (anchor.ch != 0) {
        replacement = "\n" + replacement;
        dstLine += 1;
      }
      if (head.ch != editor.getLine(head.line).length) {
        replacement = replacement + "\n";
      }
      editor.replaceSelection(replacement);
      editor.setCursor({ line: dstLine, ch: 3 });
    } else {
      let cs = editor.getCursor();
      let replace = "```\n```";
      let dstLine = cs.line;
      if (cs.ch != 0) {
        replace = "\n" + replace;
        dstLine += 1;
      }
      if (cs.ch != editor.getLine(cs.line).length) {
        replace = replace + "\n";
      }
      editor.replaceRange(replace, cs);
      editor.setCursor({ line: dstLine, ch: 3 });
    }
  }
  refreshSelectionReplaceRule() {
    this.SelectionReplaceMap = new Map(this.selectionReplaceMapInitalData);
    for (let i = 0; i < this.settings.userSelRepRuleTrigger.length; i++) {
      let trigger = this.settings.userSelRepRuleTrigger[i];
      let lefts = this.settings.userSelRepRuleValue[i].left;
      let rights = this.settings.userSelRepRuleValue[i].right;
      this.SelectionReplaceMap.set(trigger, { left: lefts, right: rights });
    }
  }
  addUserSelectionRepRule(trigger, left, right) {
    if (this.settings.userSelRepRuleTrigger.includes(trigger))
      return false;
    this.settings.userSelRepRuleTrigger.push(trigger);
    this.settings.userSelRepRuleValue.push({ left, right });
    this.refreshSelectionReplaceRule();
    return true;
  }
  deleteUserSelectionRepRule(idx) {
    if (idx < 0 || idx >= this.settings.userSelRepRuleTrigger.length)
      return;
    this.settings.userSelRepRuleTrigger.splice(idx, 1);
    this.settings.userSelRepRuleValue.splice(idx, 1);
    this.refreshSelectionReplaceRule();
  }
  updateUserSelectionRepRule(idx, left, right) {
    if (idx < 0 || idx >= this.settings.userSelRepRuleTrigger.length)
      return;
    this.settings.userSelRepRuleValue[idx].left = left;
    this.settings.userSelRepRuleValue[idx].right = right;
    this.refreshSelectionReplaceRule();
  }
  async loadUserRulesAsync() {
    try {
      const { UserRulesProcessor } = await import("./chunk-user-rules-EZHBH3SZ.js");
      this.userRulesProcessor = new UserRulesProcessor(this.settings);
      this.UserDeleteRules = this.userRulesProcessor.userDeleteRules;
      this.UserConvertRules = this.userRulesProcessor.userConvertRules;
    } catch (error) {
      console.error("Failed to load user rules processor:", error);
      this.UserDeleteRules = ruleStringList2RuleList(this.settings.userDeleteRulesStrList);
      this.UserConvertRules = ruleStringList2RuleList(this.settings.userConvertRulesStrList);
    }
  }
  async refreshUserDeleteRule() {
    if (this.userRulesProcessor) {
      this.userRulesProcessor.refreshUserRules();
      this.UserDeleteRules = this.userRulesProcessor.userDeleteRules;
    } else {
      this.UserDeleteRules = ruleStringList2RuleList(this.settings.userDeleteRulesStrList);
    }
  }
  async addUserDeleteRule(before, after) {
    this.settings.userDeleteRulesStrList.push([before, after]);
    await this.refreshUserDeleteRule();
  }
  async deleteUserDeleteRule(idx) {
    if (idx >= this.settings.userDeleteRulesStrList.length || idx < 0)
      return;
    this.settings.userDeleteRulesStrList.splice(idx, 1);
    await this.refreshUserDeleteRule();
  }
  async updateUserDeleteRule(idx, before, after) {
    if (idx >= this.settings.userDeleteRulesStrList.length || idx < 0)
      return;
    this.settings.userDeleteRulesStrList[idx][0] = before;
    this.settings.userDeleteRulesStrList[idx][1] = after;
    await this.refreshUserDeleteRule();
  }
  async refreshUserConvertRule() {
    if (this.userRulesProcessor) {
      this.userRulesProcessor.refreshUserRules();
      this.UserConvertRules = this.userRulesProcessor.userConvertRules;
    } else {
      this.UserConvertRules = ruleStringList2RuleList(this.settings.userConvertRulesStrList);
    }
  }
  async addUserConvertRule(before, after) {
    this.settings.userConvertRulesStrList.push([before, after]);
    await this.refreshUserConvertRule();
  }
  async deleteUserConvertRule(idx) {
    if (idx >= this.settings.userConvertRulesStrList.length || idx < 0)
      return;
    this.settings.userConvertRulesStrList.splice(idx, 1);
    await this.refreshUserConvertRule();
  }
  getCommandNameMap() {
    const lang = window.localStorage.getItem("language");
    let command_name_map_en = /* @__PURE__ */ new Map([
      ["format_article", "Format current article"],
      ["format_selection", "Format selected text or current line"],
      ["delete_blank_line", "Delete blank lines of the selected or whole article"],
      ["insert_codeblock", "Insert code block w/wo selection"],
      ["switch_autoformat", "Switch autoformat"],
      ["paste_wo_format", "Paste without format"],
      ["toggle_comment", "Toggle comment"],
      ["goto_new_line_after_cur_line", "Go to new line after current line"],
      ["select_block", "Select current text block"]
    ]);
    let command_name_map_zh_TW = /* @__PURE__ */ new Map([
      ["format_article", "\u683C\u5F0F\u5316\u5168\u6587"],
      ["format_selection", "\u683C\u5F0F\u5316\u9078\u4E2D\u90E8\u5206/\u7576\u524D\u884C"],
      ["delete_blank_line", "\u522A\u9664\u9078\u4E2D\u90E8\u5206/\u5168\u6587\u7684\u591A\u9918\u7A7A\u767D\u884C"],
      ["insert_codeblock", "\u63D2\u5165\u4EE3\u78BC\u584A"],
      ["switch_autoformat", "\u5207\u63DB\u81EA\u52D5\u683C\u5F0F\u5316\u958B\u95DC"],
      ["paste_wo_format", "\u7121\u683C\u5F0F\u5316\u7C98\u8CBC"],
      ["toggle_comment", "\u5207\u63DB\u8A3B\u91CB"],
      ["goto_new_line_after_cur_line", "\u8DF3\u5230\u7576\u524D\u884C\u5F8C\u7684\u65B0\u884C"],
      ["select_block", "\u9078\u64C7\u7576\u524D\u6587\u672C\u584A"]
    ]);
    let command_name_map_zh = /* @__PURE__ */ new Map([
      ["format_article", "\u683C\u5F0F\u5316\u5168\u6587"],
      ["format_selection", "\u683C\u5F0F\u5316\u9009\u4E2D\u90E8\u5206/\u5F53\u524D\u884C"],
      ["delete_blank_line", "\u522A\u9664\u9009\u4E2D\u90E8\u5206/\u5168\u6587\u7684\u591A\u4F59\u7A7A\u767D\u884C"],
      ["insert_codeblock", "\u63D2\u5165\u4EE3\u7801\u5757"],
      ["switch_autoformat", "\u5207\u6362\u81EA\u52A8\u683C\u5F0F\u5316\u5F00\u5173"],
      ["paste_wo_format", "\u65E0\u683C\u5F0F\u5316\u7C98\u8D34"],
      ["toggle_comment", "\u5207\u6362\u6CE8\u91CA"],
      ["goto_new_line_after_cur_line", "\u8DF3\u5230\u5F53\u524D\u884C\u540E\u65B0\u884C"],
      ["select_block", "\u9009\u62E9\u5F53\u524D\u6587\u672C\u5757"]
    ]);
    let command_name_map_ru = /* @__PURE__ */ new Map([
      ["format_article", "\u0424\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0442\u0435\u043A\u0443\u0449\u0443\u044E \u0441\u0442\u0430\u0442\u044C\u044E"],
      ["format_selection", "\u0424\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0439 \u0442\u0435\u043A\u0441\u0442 \u0438\u043B\u0438 \u0442\u0435\u043A\u0443\u0449\u0443\u044E \u0441\u0442\u0440\u043E\u043A\u0443"],
      ["delete_blank_line", "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u043F\u0443\u0441\u0442\u044B\u0435 \u0441\u0442\u0440\u043E\u043A\u0438 \u0432 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u043D\u043E\u043C \u0438\u043B\u0438 \u0432\u0441\u0435\u0439 \u0441\u0442\u0430\u0442\u044C\u0435"],
      ["insert_codeblock", "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044C \u0431\u043B\u043E\u043A \u043A\u043E\u0434\u0430 \u0441/\u0431\u0435\u0437 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u043C"],
      ["switch_autoformat", "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0430\u0432\u0442\u043E\u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435"],
      ["paste_wo_format", "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044C \u0431\u0435\u0437 \u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F"],
      ["toggle_comment", "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439"],
      ["goto_new_line_after_cur_line", "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043A \u043D\u043E\u0432\u043E\u0439 \u0441\u0442\u0440\u043E\u043A\u0435 \u043F\u043E\u0441\u043B\u0435 \u0442\u0435\u043A\u0443\u0449\u0435\u0439"],
      ["select_block", "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0442\u0435\u043A\u0443\u0449\u0438\u0439 \u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439 \u0431\u043B\u043E\u043A"]
    ]);
    let command_name_map = command_name_map_en;
    if (lang == "zh") {
      command_name_map = command_name_map_zh;
    } else if (lang == "zh-TW") {
      command_name_map = command_name_map_zh_TW;
    } else if (lang == "ru") {
      command_name_map = command_name_map_ru;
    }
    return command_name_map;
  }
  async updateUserConvertRule(idx, before, after) {
    if (idx >= this.settings.userConvertRulesStrList.length || idx < 0)
      return;
    this.settings.userConvertRulesStrList[idx][0] = before;
    this.settings.userConvertRulesStrList[idx][1] = after;
    await this.refreshUserConvertRule();
  }
  async loadSettings() {
    try {
      const userData = await this.loadData();
      this.settings = Object.assign({}, DEFAULT_SETTINGS, userData || {});
    } catch (error) {
      console.error("EasyTyping: Failed to load settings, using defaults:", error);
      this.settings = Object.assign({}, DEFAULT_SETTINGS);
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
export {
  EasyTypingPlugin as default
};
